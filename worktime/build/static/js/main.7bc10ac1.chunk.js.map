{"version":3,"sources":["Components/Header.js","Components/Form.js","Components/Times.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","Form","props","inHourInput","React","createRef","inMinInput","outHourInput","outMinInput","timeCalc","e","preventDefault","inH","parseInt","current","value","inM","outH","outM","Number","isNaN","alert","formHandle","resetHandler","clearAll","resetConfirm","window","confirm","bind","id","this","decTotal","toFixed","onSubmit","htmlFor","type","ref","step","min","max","placeholder","onClick","Component","Times","deleteHandler","deleteShift","totalChange","timeDec","displayTime","clockTime","App","prevItemId","formHandler","inHour","inMin","outHour","outMin","hours","minutes","setState","times","state","push","i","length","toString","clockHours","clockMinutes","timeDeci","prevState","shifts","handleDeleteShift","filter","p","handleTotalChange","decTime","handleClearShifts","map","shift","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bc10ac1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n\t<header className=\"App-header\">\r\n    <h1>Work Time Calculator</h1>\r\n    <h2>Convert Hours to Decimals</h2>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nclass Form extends Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n\r\n    this.resetHandler = this.resetHandler.bind(this);\r\n  }\r\n\r\n  // References\r\n\tinHourInput = React.createRef();\r\n\tinMinInput = React.createRef();\r\n\toutHourInput = React.createRef();\r\n\toutMinInput = React.createRef();\r\n\r\n  timeCalc = (e) => {\r\n  \te.preventDefault();\r\n  \t\r\n  \tlet inH = parseInt(this.inHourInput.current.value);\r\n  \tlet inM = parseInt(this.inMinInput.current.value);\r\n  \tlet outH = parseInt(this.outHourInput.current.value);\r\n  \tlet outM = parseInt(this.outMinInput.current.value);\r\n\r\n    // Validate inputs - only accept numbers\r\n    if( Number.isNaN(inH) || Number.isNaN(inM) || Number.isNaN(outH) || Number.isNaN(outM) ) {\r\n      alert('Please complete all fields to continue');\r\n    }\r\n    \r\n    else {\r\n  \t this.props.formHandle(inH, inM, outH, outM);  // formHandler\r\n    }\r\n  }\r\n\r\n\r\n  // Deletes all shifts - only called from resetConfirm\r\n  resetHandler = (e) => {\r\n    // Reset form inputs to 00\r\n    this.inHourInput.current.value = \"\";\r\n    this.inMinInput.current.value = \"\";\r\n    this.outHourInput.current.value = \"\";\r\n    this.outMinInput.current.value = \"\";\r\n  \t\r\n    this.props.clearAll();   // handleClearShifts\r\n  }\r\n\r\n  // Confirm delete all shifts\r\n  resetConfirm = (e) => {\r\n    e.preventDefault();\r\n    if (window.confirm(\"Delete all shifts?\\nThis cannot be undone\")) {\r\n      this.resetHandler(e);\r\n    } \r\n  }\r\n\r\n\trender() {\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"formContainer\">\r\n\t\t\t\t<div className=\"total\">\r\n\t\t\t\t\t<span id=\"totalH\">\r\n\t\t\t\t\t\tTotal Hours: {this.props.decTotal.toFixed(2)}\r\n\t\t\t\t\t</span>\t\r\n\t\t\t\t</div>\r\n        <form onSubmit={this.timeCalc} id=\"shiftForm\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inHour\">IN</label>\r\n            <input type=\"number\" ref={this.inHourInput} id=\"inHour\" step=\"1\" min=\"0\" max=\"23\" placeholder=\"00\" />\r\n            <input type=\"number\" ref={this.inMinInput} id=\"inMinute\" step=\"1\" min=\"0\" max=\"60\" placeholder=\"00\" />\r\n         \r\n            <label htmlFor=\"outHour\">OUT</label>\r\n            <input type=\"number\" ref={this.outHourInput} id=\"outHour\" step=\"1\" min=\"0\" max=\"23\" placeholder=\"00\" />\r\n            <input type=\"number\" ref={this.outMinInput} id=\"outMinute\" step=\"1\" min=\"0\" max=\"60\" placeholder=\"00\" />\r\n          </div>\r\n          <div>\r\n            <input type=\"submit\" id=\"submit\" value=\"Submit\" />\r\n            <button id=\"reset\" onClick={this.resetConfirm} >\r\n            \tReset\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div> \r\n\t\t);\r\n\t}\r\n}\r\n\r\nForm.propTypes = {\r\n\tformHandle: propTypes.func,\r\n  decTotal: propTypes.number\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nclass Times extends Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n\r\n    this.deleteHandler = this.deleteHandler.bind(this);\r\n  }\r\n\r\n\tdeleteHandler = (e) => {\r\n    const { \r\n      deleteShift,\r\n      id, \r\n      totalChange\r\n    } = this.props;\r\n    e.preventDefault();\r\n    deleteShift(id);      /* handleDeleteShift */\r\n    totalChange(this.props.timeDec.toFixed(2));\r\n  }\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"times\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button className=\"remove-item invisible\" onClick={this.deleteHandler}>X</button>\r\n\t\t\t\t\t{this.props.displayTime}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{this.props.clockTime} \r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"shiftTotal\">\r\n\t\t\t\t\t{this.props.timeDec.toFixed(2)} \r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nTimes.propTypes = {\r\n\tindex: propTypes.number,\r\n  id: propTypes.number,\r\n  times: propTypes.array,\r\n  clockTime: propTypes.string,\r\n  timeDec: propTypes.number,\r\n  displayTime: propTypes.string,\r\n  decTotal: propTypes.number\r\n}\r\n\r\nexport default Times;","import React, { Component } from 'react';\n\nimport Header from './Header.js';\nimport Form from './Form.js';\nimport Times from './Times';\n\nimport '../App.css';\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n     shifts: [],          // Contains all calculated shifts\n     times : [],          // Used to create displayTime.. 00:00 - 00:00 \n     displayTime: '',     // Current time in display format\n     clockTime: '',       // current time in HH:MM\n     decTotal: 0         // Running total in decimals\n    };\n\n    this.formHandler = this.formHandler.bind(this);\n  } \n\n  /* Shift ID Counter */\n  prevItemId = 0;\n\n  // Receive time inputs from Form to calculate & display\n  formHandler = (inHour, inMin, outHour, outMin) => {\n\n    // Reset hours, min, times[]\n    let hours = 0;\n    let minutes = 0;\n\n    this.setState({\n      times: []\n    })\n\n    // Display In & Out Times\n    let times = this.state.times;\n    times.push(inHour, inMin, outHour, outMin);\n\n    // Add zero before single digit hours & minutes\n    for (let i=0; i < times.length; i++) {\n      if (times[i].toString().length === 1) {\n        times[i] = \"0\" + times[i];\n      }\n    }\n  \n/* -------------------- Calculate Time -------------------- */\n\n    if (inMin > outMin  && inHour < outHour) {\n      minutes = 60 - inMin + outMin;\n      hours = outHour - inHour - 1;\n    }\n\n    else if (inMin <= outMin && inHour > outHour) {\n      hours = 24 - inHour + outHour;\n      minutes = outMin - inMin;\n    }\n\n    else if (inMin > outMin  && inHour >= outHour) {\n      hours = 24 - inHour + outHour - 1;\n      minutes = 60 - inMin + outMin;\n    }\n\n    // inHour < outHour && inMin < outMin\n    else {\n      hours = outHour - inHour;\n      minutes = outMin - inMin;\n    }\n\n    let clockHours = hours.toString();\n    let clockMinutes = minutes.toString();\n\n    // Clock hours display - add leading 0\n    if (clockHours.toString().length === 1) {\n        clockHours = \"0\" + hours;\n    }\n\n    if (clockMinutes.toString().length === 1) {\n        clockMinutes = \"0\" + minutes;\n    }\n\n    const timeDeci = hours + (minutes / 60);\n    \n    // Total Hours Counter - add hours to total (decimal)\n    this.setState( prevState => ({\n        decTotal: prevState.decTotal += timeDeci\n    }));\n\n/* -------------------- Add Shift -------------------- */\n    \n    // Shift ID counter \n    this.prevItemId += 1;\n\n    // Add Shift to list\n    this.setState( prevState => {\n      return {\n        shifts: [\n          ...prevState.shifts,\n          {\n            displayTime: times[0] + ':' + times[1] + ' - ' + \n                         times[2] + ':' + times[3],\n            clockTime: clockHours + ':' + clockMinutes,\n            timeDec: hours + (minutes / 60),\n            id: this.prevItemId\n          }\n        ]\n      }\n    });\n  } // End formHandler()\n\n  /* Delete Shift ------------------------------------ */\n  handleDeleteShift = (id) => {\n    this.setState( prevState => {\n      return {\n        shifts: prevState.shifts.filter(p => p.id !== id)\n      };\n    });\n  }\n\n   /* Adjust Total when Shift is deleted -------------- */\n  handleTotalChange = (decTime) => {\n    this.setState( prevState => ({\n      decTotal: prevState.decTotal - decTime\n    }));\n    \n  }\n\n  /* Clear list - remove all items, set bought counter to 0 */\n  handleClearShifts = (id) => {\n    this.setState( prevState => {\n      return {\n        shifts: this.state.shifts.filter(p => p.id === 'x'),\n        decTotal: 0\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      \n        <Header />\n  \n        {this.state.shifts.map( (shift, index) =>\n          <Times\n            index={ index } \n            id={ shift.id } \n            key={ shift.id.toString() }\n            times={this.state.times}\n            clockTime={shift.clockTime}  \n            timeDec={shift.timeDec}\n            displayTime={shift.displayTime}\n            decTotal={this.state.decTotal}\n            deleteShift={ this.handleDeleteShift }\n            totalChange={ this.handleTotalChange }\n          />\n        )}\n\n        <Form \n          formHandle={this.formHandler}\n          decTotal={this.state.decTotal}\n          clearAll={this.handleClearShifts}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}